{"ast":null,"code":"var _jsxFileName = \"D:\\\\LostAndFound\\\\client\\\\src\\\\services\\\\authService.js\",\n  _s = $RefreshSig$();\n// import axios from 'axios';\n// import jwtDecode from 'jwt-decode';\n\n// const API_URL = '/api/auth';\n\n// // Register a new user (security guard)\n// const register = async (userData) => {\n//   try {\n//     const response = await axios.post(`${API_URL}/register`, userData);\n\n//     if (response.data && response.data.token) {\n//       localStorage.setItem('user', JSON.stringify(response.data));\n//     }\n\n//     return response.data;\n//   } catch (error) {\n//     throw error.response?.data || { message: 'Server error' };\n//   }\n// };\n\n// // Login user (security guard)\n// const login = async (email, password) => {\n//   try {\n//     const response = await axios.post(`${API_URL}/login`, { email, password });\n\n//     if (response.data && response.data.token) {\n//       localStorage.setItem('user', JSON.stringify(response.data));\n//     }\n\n//     return response.data;\n//   } catch (error) {\n//     throw error.response?.data || { message: 'Server error' };\n//   }\n// };\n\n// // Logout user\n// const logout = () => {\n//   localStorage.removeItem('user');\n// };\n\n// // Get current user from local storage\n// const getCurrentUser = () => {\n//   return JSON.parse(localStorage.getItem('user'));\n// };\n\n// // Get auth token\n// const getToken = () => {\n//   const user = getCurrentUser();\n//   return user ? user.token : null;\n// };\n\n// // Set auth token in axios headers\n// const setAuthHeader = () => {\n//   const token = getToken();\n//   if (token) {\n//     axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n//   } else {\n//     delete axios.defaults.headers.common['Authorization'];\n//   }\n// };\n\n// // Export individual functions for direct importing\n// export { register, login, logout, getCurrentUser, getToken, setAuthHeader };\n\n// // Default export for backward compatibility\n// const authService = {\n//   register,\n//   login,\n//   logout,\n//   getCurrentUser,\n//   getToken,\n//   setAuthHeader\n// };\n\n// export default authService;\n\nimport { createContext, useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Add these authentication functions\n  const isAuthenticated = useCallback(() => {\n    return !!localStorage.getItem('token');\n  }, []);\n  const isSecurityGuard = useCallback(() => {\n    return (user === null || user === void 0 ? void 0 : user.role) === 'security';\n  }, [user]);\n\n  // Add initialization logic\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Verify token and fetch user data\n      verifyToken(token).then(userData => {\n        setUser(userData);\n        setLoading(false);\n      }).catch(() => {\n        setLoading(false);\n      });\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      setUser,\n      loading,\n      isAuthenticated,\n      isSecurityGuard\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n// Mock token verification function - replace with your actual implementation\n_s(AuthProvider, \"cKGsmT7dqVoNgsYNE2Zo9yGSQjc=\");\n_c = AuthProvider;\nasync function verifyToken(token) {\n  // Your token verification logic here\n  return {\n    role: 'security'\n  }; // Example return\n}\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","isAuthenticated","localStorage","getItem","isSecurityGuard","role","token","verifyToken","then","userData","catch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/LostAndFound/client/src/services/authService.js"],"sourcesContent":["// import axios from 'axios';\r\n// import jwtDecode from 'jwt-decode';\r\n\r\n// const API_URL = '/api/auth';\r\n\r\n// // Register a new user (security guard)\r\n// const register = async (userData) => {\r\n//   try {\r\n//     const response = await axios.post(`${API_URL}/register`, userData);\r\n    \r\n//     if (response.data && response.data.token) {\r\n//       localStorage.setItem('user', JSON.stringify(response.data));\r\n//     }\r\n    \r\n//     return response.data;\r\n//   } catch (error) {\r\n//     throw error.response?.data || { message: 'Server error' };\r\n//   }\r\n// };\r\n\r\n// // Login user (security guard)\r\n// const login = async (email, password) => {\r\n//   try {\r\n//     const response = await axios.post(`${API_URL}/login`, { email, password });\r\n    \r\n//     if (response.data && response.data.token) {\r\n//       localStorage.setItem('user', JSON.stringify(response.data));\r\n//     }\r\n    \r\n//     return response.data;\r\n//   } catch (error) {\r\n//     throw error.response?.data || { message: 'Server error' };\r\n//   }\r\n// };\r\n\r\n// // Logout user\r\n// const logout = () => {\r\n//   localStorage.removeItem('user');\r\n// };\r\n\r\n// // Get current user from local storage\r\n// const getCurrentUser = () => {\r\n//   return JSON.parse(localStorage.getItem('user'));\r\n// };\r\n\r\n// // Get auth token\r\n// const getToken = () => {\r\n//   const user = getCurrentUser();\r\n//   return user ? user.token : null;\r\n// };\r\n\r\n// // Set auth token in axios headers\r\n// const setAuthHeader = () => {\r\n//   const token = getToken();\r\n//   if (token) {\r\n//     axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n//   } else {\r\n//     delete axios.defaults.headers.common['Authorization'];\r\n//   }\r\n// };\r\n\r\n// // Export individual functions for direct importing\r\n// export { register, login, logout, getCurrentUser, getToken, setAuthHeader };\r\n\r\n// // Default export for backward compatibility\r\n// const authService = {\r\n//   register,\r\n//   login,\r\n//   logout,\r\n//   getCurrentUser,\r\n//   getToken,\r\n//   setAuthHeader\r\n// };\r\n\r\n// export default authService;\r\n\r\n\r\nimport { createContext, useState, useEffect, useCallback } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Add these authentication functions\r\n  const isAuthenticated = useCallback(() => {\r\n    return !!localStorage.getItem('token');\r\n  }, []);\r\n\r\n  const isSecurityGuard = useCallback(() => {\r\n    return user?.role === 'security';\r\n  }, [user]);\r\n\r\n  // Add initialization logic\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      // Verify token and fetch user data\r\n      verifyToken(token).then(userData => {\r\n        setUser(userData);\r\n        setLoading(false);\r\n      }).catch(() => {\r\n        setLoading(false);\r\n      });\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider \r\n      value={{ \r\n        user, \r\n        setUser, \r\n        loading, \r\n        isAuthenticated, \r\n        isSecurityGuard \r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Mock token verification function - replace with your actual implementation\r\nasync function verifyToken(token) {\r\n  // Your token verification logic here\r\n  return { role: 'security' }; // Example return\r\n}"],"mappings":";;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExE,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMa,eAAe,GAAGX,WAAW,CAAC,MAAM;IACxC,OAAO,CAAC,CAACY,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,eAAe,GAAGd,WAAW,CAAC,MAAM;IACxC,OAAO,CAAAO,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEQ,IAAI,MAAK,UAAU;EAClC,CAAC,EAAE,CAACR,IAAI,CAAC,CAAC;;EAEV;EACAR,SAAS,CAAC,MAAM;IACd,MAAMiB,KAAK,GAAGJ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIG,KAAK,EAAE;MACT;MACAC,WAAW,CAACD,KAAK,CAAC,CAACE,IAAI,CAACC,QAAQ,IAAI;QAClCX,OAAO,CAACW,QAAQ,CAAC;QACjBT,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,CAACU,KAAK,CAAC,MAAM;QACbV,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLA,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACER,OAAA,CAACC,WAAW,CAACkB,QAAQ;IACnBC,KAAK,EAAE;MACLf,IAAI;MACJC,OAAO;MACPC,OAAO;MACPE,eAAe;MACfG;IACF,CAAE;IAAAT,QAAA,EAEDA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAApB,EAAA,CA5CaF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AA6CzB,eAAea,WAAWA,CAACD,KAAK,EAAE;EAChC;EACA,OAAO;IAAED,IAAI,EAAE;EAAW,CAAC,CAAC,CAAC;AAC/B;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}