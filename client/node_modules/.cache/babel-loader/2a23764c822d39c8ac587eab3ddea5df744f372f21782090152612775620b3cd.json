{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with default config\nconst API = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  timeout: 10000\n});\n\n// Add token to requests if available\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\nAPI.interceptors.response.use(response => response, error => {\n  // Check if error is due to server being unavailable\n  if (!error.response) {\n    console.error('Server unavailable:', error.message);\n    // Will be handled by the component\n  }\n  return Promise.reject(error);\n});\n\n// Export API services\nconst apiService = {\n  // Authentication\n  checkServerStatus: () => API.get('/test'),\n  // Items\n  getAllItems: () => API.get('/items'),\n  getItemById: id => API.get(`/items/${id}`),\n  addItem: itemData => API.post('/items', itemData),\n  updateItem: (id, itemData) => API.put(`/items/${id}`, itemData),\n  deleteItem: id => API.delete(`/items/${id}`),\n  markAsDelivered: id => API.put(`/items/${id}/delivered`),\n  // Claims\n  claimItem: (id, claimData) => API.post(`/items/${id}/claim`, claimData),\n  // Dashboard\n  getDashboardStats: () => API.get('/dashboard/stats'),\n  getRecentItems: (limit = 5) => API.get(`/dashboard/recent?limit=${limit}`),\n  // Upload\n  uploadImage: formData => API.post('/upload', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  })\n};\nexport default apiService;","map":{"version":3,"names":["axios","API","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","console","message","apiService","checkServerStatus","get","getAllItems","getItemById","id","addItem","itemData","post","updateItem","put","deleteItem","delete","markAsDelivered","claimItem","claimData","getDashboardStats","getRecentItems","limit","uploadImage","formData"],"sources":["C:/Users/Rishikesh Ghodke/Desktop/lostAndFound/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an axios instance with default config\r\nconst API = axios.create({\r\n  baseURL: 'http://localhost:5000/api',\r\n  timeout: 10000,\r\n});\r\n\r\n// Add token to requests if available\r\nAPI.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\nAPI.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // Check if error is due to server being unavailable\r\n    if (!error.response) {\r\n      console.error('Server unavailable:', error.message);\r\n      // Will be handled by the component\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Export API services\r\nconst apiService = {\r\n  // Authentication\r\n  checkServerStatus: () => API.get('/test'),\r\n  \r\n  // Items\r\n  getAllItems: () => API.get('/items'),\r\n  getItemById: (id) => API.get(`/items/${id}`),\r\n  addItem: (itemData) => API.post('/items', itemData),\r\n  updateItem: (id, itemData) => API.put(`/items/${id}`, itemData),\r\n  deleteItem: (id) => API.delete(`/items/${id}`),\r\n  markAsDelivered: (id) => API.put(`/items/${id}/delivered`),\r\n  \r\n  // Claims\r\n  claimItem: (id, claimData) => API.post(`/items/${id}/claim`, claimData),\r\n  \r\n  // Dashboard\r\n  getDashboardStats: () => API.get('/dashboard/stats'),\r\n  getRecentItems: (limit = 5) => API.get(`/dashboard/recent?limit=${limit}`),\r\n  \r\n  // Upload\r\n  uploadImage: (formData) => API.post('/upload', formData, {\r\n    headers: { 'Content-Type': 'multipart/form-data' }\r\n  }),\r\n};\r\n\r\nexport default apiService; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT;EACA,IAAI,CAACA,KAAK,CAACG,QAAQ,EAAE;IACnBC,OAAO,CAACJ,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACK,OAAO,CAAC;IACnD;EACF;EACA,OAAOJ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,MAAMM,UAAU,GAAG;EACjB;EACAC,iBAAiB,EAAEA,CAAA,KAAMnB,GAAG,CAACoB,GAAG,CAAC,OAAO,CAAC;EAEzC;EACAC,WAAW,EAAEA,CAAA,KAAMrB,GAAG,CAACoB,GAAG,CAAC,QAAQ,CAAC;EACpCE,WAAW,EAAGC,EAAE,IAAKvB,GAAG,CAACoB,GAAG,CAAC,UAAUG,EAAE,EAAE,CAAC;EAC5CC,OAAO,EAAGC,QAAQ,IAAKzB,GAAG,CAAC0B,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC;EACnDE,UAAU,EAAEA,CAACJ,EAAE,EAAEE,QAAQ,KAAKzB,GAAG,CAAC4B,GAAG,CAAC,UAAUL,EAAE,EAAE,EAAEE,QAAQ,CAAC;EAC/DI,UAAU,EAAGN,EAAE,IAAKvB,GAAG,CAAC8B,MAAM,CAAC,UAAUP,EAAE,EAAE,CAAC;EAC9CQ,eAAe,EAAGR,EAAE,IAAKvB,GAAG,CAAC4B,GAAG,CAAC,UAAUL,EAAE,YAAY,CAAC;EAE1D;EACAS,SAAS,EAAEA,CAACT,EAAE,EAAEU,SAAS,KAAKjC,GAAG,CAAC0B,IAAI,CAAC,UAAUH,EAAE,QAAQ,EAAEU,SAAS,CAAC;EAEvE;EACAC,iBAAiB,EAAEA,CAAA,KAAMlC,GAAG,CAACoB,GAAG,CAAC,kBAAkB,CAAC;EACpDe,cAAc,EAAEA,CAACC,KAAK,GAAG,CAAC,KAAKpC,GAAG,CAACoB,GAAG,CAAC,2BAA2BgB,KAAK,EAAE,CAAC;EAE1E;EACAC,WAAW,EAAGC,QAAQ,IAAKtC,GAAG,CAAC0B,IAAI,CAAC,SAAS,EAAEY,QAAQ,EAAE;IACvD3B,OAAO,EAAE;MAAE,cAAc,EAAE;IAAsB;EACnD,CAAC;AACH,CAAC;AAED,eAAeO,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}