{"ast":null,"code":"// import axios from 'axios';\n// import { getToken } from './authService';\n// const API_URL ='http://localhost:5000/api/items'; ;\n\n// // Set auth token for every request\n// axios.interceptors.request.use(\n//   (config) => {\n//     const token = getToken();\n//     if (token) {\n//       config.headers['Authorization'] = `Bearer ${token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Get all items\n// // const getAllItems = async () => {\n// //   try {\n// //     const response = await axios.get(API_URL);\n// //     return response.data;\n// //   } catch (error) {\n// //     throw error.response?.data || { message: 'Server error' };\n// //   }\n// // };\n// const getAllItems = async () => {\n//   try {\n//     const response = await axios.get(API_URL);\n//     return response.data.data; // Adjust based on your API response\n//   } catch (error) {\n//     console.error('Error fetching items:', error);\n//     throw error;\n//   }\n// };\n\n// // Alias for getAllItems to match import in LostItems.js\n// const getItems = getAllItems;\n\n// // Get items by category\n// const getItemsByCategory = async (category) => {\n//   try {\n//     const response = await axios.get(`${API_URL}/category/${category}`);\n//     return response.data;\n//   } catch (error) {\n//     throw error.response?.data || { message: 'Server error' };\n//   }\n// };\n\n// // Get recent items (for homepage)\n// const getRecentItems = async (limit = 6) => {\n//   try {\n//     const response = await axios.get(`${API_URL}/recent?limit=${limit}`);\n//     return response.data;\n//   } catch (error) {\n//     throw error.response?.data || { message: 'Server error' };\n//   }\n// };\n\n// // Search items\n// const searchItems = async (query) => {\n//   try {\n//     const response = await axios.get(`${API_URL}/search?q=${query}`);\n//     return response.data;\n//   } catch (error) {\n//     throw error.response?.data || { message: 'Server error' };\n//   }\n// };\n\n// // Get item by ID\n// const getItemById = async (id) => {\n//   try {\n//     const response = await axios.get(`${API_URL}/${id}`);\n//     return response.data;\n//   } catch (error) {\n//     throw error.response?.data || { message: 'Server error' };\n//   }\n// };\n\n// // Add new item (security guard only)\n// const addItem = async (itemData) => {\n//   try {\n//     // Create FormData for file upload\n//     const formData = new FormData();\n\n//     // Append item image\n//     if (itemData.image) {\n//       formData.append('image', itemData.image);\n//     }\n\n//     // Append other item data\n//     formData.append('name', itemData.name);\n//     formData.append('category', itemData.category);\n//     formData.append('description', itemData.description);\n//     formData.append('location', itemData.location);\n//     formData.append('foundDate', itemData.foundDate);\n\n//     const response = await axios.post(API_URL, formData, {\n//       headers: {\n//         'Content-Type': 'multipart/form-data'\n//       }\n//     });\n\n//     return response.data;\n//   } catch (error) {\n//     throw error.response?.data || { message: 'Server error' };\n//   }\n// };\n\n// // Update item\n// const updateItem = async (id, itemData) => {\n//   try {\n//     const response = await axios.put(`${API_URL}/${id}`, itemData);\n//     return response.data;\n//   } catch (error) {\n//     throw error.response?.data || { message: 'Server error' };\n//   }\n// };\n\n// // Update item status (claimed/delivered)\n// const updateItemStatus = async (id, status) => {\n//   try {\n//     const response = await axios.patch(`${API_URL}/${id}/status`, { status });\n//     return response.data;\n//   } catch (error) {\n//     throw error.response?.data || { message: 'Server error' };\n//   }\n// };\n\n// // Mark item as claimed/delivered\n// const claimItem = async (id, claimData) => {\n//   try {\n//     const response = await axios.put(`${API_URL}/${id}/claim`, claimData);\n//     return response.data;\n//   } catch (error) {\n//     throw error.response?.data || { message: 'Server error' };\n//   }\n// };\n\n// // Delete item\n// const deleteItem = async (id) => {\n//   try {\n//     const response = await axios.delete(`${API_URL}/${id}`);\n//     return response.data;\n//   } catch (error) {\n//     throw error.response?.data || { message: 'Server error' };\n//   }\n// };\n\n// // Export individual functions for direct importing\n// export {\n//   getAllItems,\n//   getItems,\n//   getItemsByCategory,\n//   getRecentItems,\n//   searchItems,\n//   getItemById,\n//   addItem,\n//   updateItem,\n//   updateItemStatus,\n//   claimItem,\n//   deleteItem\n// };\n\n// // Default export for backward compatibility\n// const itemService = {\n//   getAllItems,\n//   getItems,\n//   getItemsByCategory,\n//   getRecentItems,\n//   searchItems,\n//   getItemById,\n//   addItem,\n//   updateItem,\n//   updateItemStatus,\n//   claimItem,\n//   deleteItem\n// };\n\n// export default itemService;\n\nimport axios from 'axios';\nimport { getToken } from './authService'; // Named import from your authService\n\nconst API_URL = '/api/items';\n\n// Set auth token for every request\naxios.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Get all items\nconst getAllItems = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n      message: 'Server error'\n    };\n  }\n};\n\n// Rest of your itemService functions...\nconst getItems = getAllItems;\nexport { getAllItems, getItems\n// other exports...\n};\n\n// Default export for backward compatibility\nconst itemService = {\n  getAllItems,\n  getItems\n  // other functions...\n};\nexport default itemService;","map":{"version":3,"names":["axios","getToken","API_URL","interceptors","request","use","config","token","headers","error","Promise","reject","getAllItems","response","get","data","_error$response","message","getItems","itemService"],"sources":["D:/LostAndFound/client/src/services/itemService.js"],"sourcesContent":["// import axios from 'axios';\r\n// import { getToken } from './authService';\r\n// const API_URL ='http://localhost:5000/api/items'; ;\r\n\r\n// // Set auth token for every request\r\n// axios.interceptors.request.use(\r\n//   (config) => {\r\n//     const token = getToken();\r\n//     if (token) {\r\n//       config.headers['Authorization'] = `Bearer ${token}`;\r\n//     }\r\n//     return config;\r\n//   },\r\n//   (error) => {\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// // Get all items\r\n// // const getAllItems = async () => {\r\n// //   try {\r\n// //     const response = await axios.get(API_URL);\r\n// //     return response.data;\r\n// //   } catch (error) {\r\n// //     throw error.response?.data || { message: 'Server error' };\r\n// //   }\r\n// // };\r\n// const getAllItems = async () => {\r\n//   try {\r\n//     const response = await axios.get(API_URL);\r\n//     return response.data.data; // Adjust based on your API response\r\n//   } catch (error) {\r\n//     console.error('Error fetching items:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n\r\n// // Alias for getAllItems to match import in LostItems.js\r\n// const getItems = getAllItems;\r\n\r\n// // Get items by category\r\n// const getItemsByCategory = async (category) => {\r\n//   try {\r\n//     const response = await axios.get(`${API_URL}/category/${category}`);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     throw error.response?.data || { message: 'Server error' };\r\n//   }\r\n// };\r\n\r\n// // Get recent items (for homepage)\r\n// const getRecentItems = async (limit = 6) => {\r\n//   try {\r\n//     const response = await axios.get(`${API_URL}/recent?limit=${limit}`);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     throw error.response?.data || { message: 'Server error' };\r\n//   }\r\n// };\r\n\r\n// // Search items\r\n// const searchItems = async (query) => {\r\n//   try {\r\n//     const response = await axios.get(`${API_URL}/search?q=${query}`);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     throw error.response?.data || { message: 'Server error' };\r\n//   }\r\n// };\r\n\r\n// // Get item by ID\r\n// const getItemById = async (id) => {\r\n//   try {\r\n//     const response = await axios.get(`${API_URL}/${id}`);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     throw error.response?.data || { message: 'Server error' };\r\n//   }\r\n// };\r\n\r\n// // Add new item (security guard only)\r\n// const addItem = async (itemData) => {\r\n//   try {\r\n//     // Create FormData for file upload\r\n//     const formData = new FormData();\r\n    \r\n//     // Append item image\r\n//     if (itemData.image) {\r\n//       formData.append('image', itemData.image);\r\n//     }\r\n    \r\n//     // Append other item data\r\n//     formData.append('name', itemData.name);\r\n//     formData.append('category', itemData.category);\r\n//     formData.append('description', itemData.description);\r\n//     formData.append('location', itemData.location);\r\n//     formData.append('foundDate', itemData.foundDate);\r\n    \r\n//     const response = await axios.post(API_URL, formData, {\r\n//       headers: {\r\n//         'Content-Type': 'multipart/form-data'\r\n//       }\r\n//     });\r\n    \r\n//     return response.data;\r\n//   } catch (error) {\r\n//     throw error.response?.data || { message: 'Server error' };\r\n//   }\r\n// };\r\n\r\n// // Update item\r\n// const updateItem = async (id, itemData) => {\r\n//   try {\r\n//     const response = await axios.put(`${API_URL}/${id}`, itemData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     throw error.response?.data || { message: 'Server error' };\r\n//   }\r\n// };\r\n\r\n// // Update item status (claimed/delivered)\r\n// const updateItemStatus = async (id, status) => {\r\n//   try {\r\n//     const response = await axios.patch(`${API_URL}/${id}/status`, { status });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     throw error.response?.data || { message: 'Server error' };\r\n//   }\r\n// };\r\n\r\n// // Mark item as claimed/delivered\r\n// const claimItem = async (id, claimData) => {\r\n//   try {\r\n//     const response = await axios.put(`${API_URL}/${id}/claim`, claimData);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     throw error.response?.data || { message: 'Server error' };\r\n//   }\r\n// };\r\n\r\n// // Delete item\r\n// const deleteItem = async (id) => {\r\n//   try {\r\n//     const response = await axios.delete(`${API_URL}/${id}`);\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     throw error.response?.data || { message: 'Server error' };\r\n//   }\r\n// };\r\n\r\n// // Export individual functions for direct importing\r\n// export {\r\n//   getAllItems,\r\n//   getItems,\r\n//   getItemsByCategory,\r\n//   getRecentItems,\r\n//   searchItems,\r\n//   getItemById,\r\n//   addItem,\r\n//   updateItem,\r\n//   updateItemStatus,\r\n//   claimItem,\r\n//   deleteItem\r\n// };\r\n\r\n// // Default export for backward compatibility\r\n// const itemService = {\r\n//   getAllItems,\r\n//   getItems,\r\n//   getItemsByCategory,\r\n//   getRecentItems,\r\n//   searchItems,\r\n//   getItemById,\r\n//   addItem,\r\n//   updateItem,\r\n//   updateItemStatus,\r\n//   claimItem,\r\n//   deleteItem\r\n// };\r\n\r\n// export default itemService;\r\n\r\nimport axios from 'axios';\r\nimport { getToken } from './authService'; // Named import from your authService\r\n\r\nconst API_URL = '/api/items';\r\n\r\n// Set auth token for every request\r\naxios.interceptors.request.use(\r\n  (config) => {\r\n    const token = getToken();\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Get all items\r\nconst getAllItems = async () => {\r\n  try {\r\n    const response = await axios.get(API_URL);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { message: 'Server error' };\r\n  }\r\n};\r\n\r\n// Rest of your itemService functions...\r\nconst getItems = getAllItems;\r\n\r\nexport {\r\n  getAllItems,\r\n  getItems,\r\n  // other exports...\r\n};\r\n\r\n// Default export for backward compatibility\r\nconst itemService = {\r\n  getAllItems,\r\n  getItems,\r\n  // other functions...\r\n};\r\n\r\nexport default itemService;"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,eAAe,CAAC,CAAC;;AAE1C,MAAMC,OAAO,GAAG,YAAY;;AAE5B;AACAF,KAAK,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC3BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGN,QAAQ,CAAC,CAAC;EACxB,IAAIM,KAAK,EAAE;IACTD,MAAM,CAACE,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUD,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAG,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,MAAMG,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAACZ,OAAO,CAAC;IACzC,OAAOW,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAON,KAAK,EAAE;IAAA,IAAAO,eAAA;IACd,MAAM,EAAAA,eAAA,GAAAP,KAAK,CAACI,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBD,IAAI,KAAI;MAAEE,OAAO,EAAE;IAAe,CAAC;EAC3D;AACF,CAAC;;AAED;AACA,MAAMC,QAAQ,GAAGN,WAAW;AAE5B,SACEA,WAAW,EACXM;AACA;AAAA;;AAGF;AACA,MAAMC,WAAW,GAAG;EAClBP,WAAW;EACXM;EACA;AACF,CAAC;AAED,eAAeC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}