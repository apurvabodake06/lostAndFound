{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rishikesh Ghodke\\\\Desktop\\\\lostAndFound\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// import React, { createContext, useState, useEffect } from 'react';\n// import { jwtDecode } from 'jwt-decode';\n// import { login, logout } from '../services/authService';\n\n// export const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n\n//     if (token) {\n//       try {\n//         const decoded = jwtDecode(token);\n//         const currentTime = Date.now() / 1000;\n\n//         if (decoded.exp < currentTime) {\n//           // Token expired\n//           handleLogout();\n//         } else {\n//           setUser(decoded);\n//         }\n//       } catch (error) {\n//         console.error('Invalid token', error);\n//         handleLogout();\n//       }\n//     }\n\n//     setLoading(false);\n//   }, []);\n\n//   const handleLogin = async (email, password) => {\n//     try {\n//       const data = await login(email, password);\n\n//       if (data.token) {\n//         localStorage.setItem('token', data.token);\n//         const decoded = jwtDecode(data.token);\n//         setUser(decoded);\n//         return { success: true };\n//       }\n//     } catch (error) {\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Login failed' \n//       };\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     logout();\n//     localStorage.removeItem('token');\n//     setUser(null);\n//   };\n\n//   return (\n//     <AuthContext.Provider \n//       value={{ \n//         user, \n//         loading, \n//         login: handleLogin, \n//         logout: handleLogout,\n//         isAuthenticated: !!user\n//       }}\n//     >\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\nimport { createContext, useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Login function to be used by Login component\n  const login = useCallback((username, password) => {\n    return new Promise((resolve, reject) => {\n      // Check against hardcoded credentials\n      if (username === \"pict_guard\" && password === \"secure@guard123\") {\n        // Create a mock token for development\n        const userData = {\n          username: \"pict_guard\",\n          role: \"guard\",\n          token: \"dev-jwt-token-for-guard-auth\" // In production, get from backend\n        };\n\n        // Store in localStorage for API requests\n        localStorage.setItem('token', userData.token);\n        localStorage.setItem('user', JSON.stringify(userData));\n        setUser(userData);\n        resolve(userData);\n      } else {\n        reject(new Error(\"Invalid credentials\"));\n      }\n    });\n  }, []);\n  const logout = useCallback(() => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    // Add a redirect to home page if needed\n    window.location.href = '/';\n  }, []);\n  const isAuthenticated = useCallback(() => {\n    return !!localStorage.getItem('token');\n  }, []);\n  const isGuard = useCallback(() => {\n    return (user === null || user === void 0 ? void 0 : user.role) === 'guard';\n  }, [user]);\n\n  // Initialize auth state from localStorage\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    if (token && userData) {\n      try {\n        // In production, verify token validity here\n        setUser(JSON.parse(userData));\n      } catch (error) {\n        // Invalid user data in localStorage\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      logout,\n      isAuthenticated,\n      isGuard,\n      isSecurityGuard: isGuard // Alias for backward compatibility\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"OQHyYGHbJ7xdcwVk+1Hjl1fdG5s=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","login","username","password","Promise","resolve","reject","userData","role","token","localStorage","setItem","JSON","stringify","Error","logout","removeItem","window","location","href","isAuthenticated","getItem","isGuard","parse","error","Provider","value","isSecurityGuard","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Rishikesh Ghodke/Desktop/lostAndFound/client/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useState, useEffect } from 'react';\n// import { jwtDecode } from 'jwt-decode';\n// import { login, logout } from '../services/authService';\n\n// export const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const token = localStorage.getItem('token');\n    \n//     if (token) {\n//       try {\n//         const decoded = jwtDecode(token);\n//         const currentTime = Date.now() / 1000;\n        \n//         if (decoded.exp < currentTime) {\n//           // Token expired\n//           handleLogout();\n//         } else {\n//           setUser(decoded);\n//         }\n//       } catch (error) {\n//         console.error('Invalid token', error);\n//         handleLogout();\n//       }\n//     }\n    \n//     setLoading(false);\n//   }, []);\n\n//   const handleLogin = async (email, password) => {\n//     try {\n//       const data = await login(email, password);\n      \n//       if (data.token) {\n//         localStorage.setItem('token', data.token);\n//         const decoded = jwtDecode(data.token);\n//         setUser(decoded);\n//         return { success: true };\n//       }\n//     } catch (error) {\n//       return { \n//         success: false, \n//         message: error.response?.data?.message || 'Login failed' \n//       };\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     logout();\n//     localStorage.removeItem('token');\n//     setUser(null);\n//   };\n\n//   return (\n//     <AuthContext.Provider \n//       value={{ \n//         user, \n//         loading, \n//         login: handleLogin, \n//         logout: handleLogout,\n//         isAuthenticated: !!user\n//       }}\n//     >\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\nimport { createContext, useState, useEffect, useCallback } from 'react';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Login function to be used by Login component\n  const login = useCallback((username, password) => {\n    return new Promise((resolve, reject) => {\n      // Check against hardcoded credentials\n      if (username === \"pict_guard\" && password === \"secure@guard123\") {\n        // Create a mock token for development\n        const userData = {\n          username: \"pict_guard\",\n          role: \"guard\",\n          token: \"dev-jwt-token-for-guard-auth\" // In production, get from backend\n        };\n        \n        // Store in localStorage for API requests\n        localStorage.setItem('token', userData.token);\n        localStorage.setItem('user', JSON.stringify(userData));\n        \n        setUser(userData);\n        resolve(userData);\n      } else {\n        reject(new Error(\"Invalid credentials\"));\n      }\n    });\n  }, []);\n\n  const logout = useCallback(() => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    // Add a redirect to home page if needed\n    window.location.href = '/';\n  }, []);\n\n  const isAuthenticated = useCallback(() => {\n    return !!localStorage.getItem('token');\n  }, []);\n\n  const isGuard = useCallback(() => {\n    return user?.role === 'guard';\n  }, [user]);\n\n  // Initialize auth state from localStorage\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    \n    if (token && userData) {\n      try {\n        // In production, verify token validity here\n        setUser(JSON.parse(userData));\n      } catch (error) {\n        // Invalid user data in localStorage\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    }\n    \n    setLoading(false);\n  }, []);\n\n  return (\n    <AuthContext.Provider \n      value={{ \n        user,\n        loading,\n        login,\n        logout,\n        isAuthenticated,\n        isGuard,\n        isSecurityGuard: isGuard // Alias for backward compatibility\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}