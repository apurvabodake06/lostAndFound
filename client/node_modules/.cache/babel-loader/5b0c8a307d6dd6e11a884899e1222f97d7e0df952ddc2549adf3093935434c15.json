{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rishikesh Ghodke\\\\Desktop\\\\lostAndFound\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [serverAvailable, setServerAvailable] = useState(true);\n  const navigate = useNavigate();\n\n  // Check server availability\n  const checkServerStatus = useCallback(async () => {\n    try {\n      await axios.get('http://localhost:5000/api/test');\n      setServerAvailable(true);\n      return true;\n    } catch (error) {\n      console.log('Server unavailable:', error.message);\n      setServerAvailable(false);\n      navigate('/server-unavailable');\n      return false;\n    }\n  }, [navigate]);\n\n  // Validate token with server\n  const validateToken = useCallback(async token => {\n    try {\n      // Just check if server is available - in a real app, you'd validate the token\n      const isAvailable = await checkServerStatus();\n      if (!isAvailable) {\n        return false;\n      }\n      return true;\n    } catch (error) {\n      console.error('Error validating token:', error);\n      return false;\n    }\n  }, [checkServerStatus]);\n\n  // Check token expiration\n  const isTokenExpired = useCallback(userData => {\n    if (!userData || !userData.createdAt) return true;\n    const tokenCreationTime = new Date(userData.createdAt).getTime();\n    const currentTime = new Date().getTime();\n\n    // Token expires after 8 hours (28800000 ms)\n    const expirationTime = 8 * 60 * 60 * 1000;\n    return currentTime - tokenCreationTime > expirationTime;\n  }, []);\n\n  // Login function to be used by Login component\n  const login = useCallback(async (username, password) => {\n    try {\n      // First check if server is available\n      const serverStatus = await checkServerStatus();\n      if (!serverStatus) {\n        throw new Error(\"Server is unavailable\");\n      }\n\n      // Check against hardcoded credentials\n      if (username === \"pict_guard\" && password === \"secure@guard123\") {\n        // Create a mock token for development\n        const userData = {\n          username: \"pict_guard\",\n          role: \"guard\",\n          token: \"dev-jwt-token-for-guard-auth\",\n          // In production, get from backend\n          createdAt: new Date().toISOString() // Add creation time for expiration check\n        };\n\n        // Store in localStorage for API requests\n        localStorage.setItem('token', userData.token);\n        localStorage.setItem('user', JSON.stringify(userData));\n        setUser(userData);\n        return userData;\n      } else {\n        throw new Error(\"Invalid credentials\");\n      }\n    } catch (error) {\n      if (!serverAvailable) {\n        navigate('/server-unavailable');\n      }\n      throw error;\n    }\n  }, [checkServerStatus, navigate, serverAvailable]);\n  const logout = useCallback(() => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    // Add a redirect to home page if needed\n    window.location.href = '/';\n  }, []);\n  const isAuthenticated = useCallback(() => {\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    if (!token || !userData) {\n      return false;\n    }\n    try {\n      const parsedUserData = JSON.parse(userData);\n      if (isTokenExpired(parsedUserData)) {\n        return false;\n      }\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }, [isTokenExpired]);\n  const isGuard = useCallback(() => {\n    return (user === null || user === void 0 ? void 0 : user.role) === 'guard';\n  }, [user]);\n\n  // Periodically check server status in the background\n  useEffect(() => {\n    const serverStatusInterval = setInterval(() => {\n      checkServerStatus();\n    }, 60000); // Check every minute\n\n    return () => clearInterval(serverStatusInterval);\n  }, [checkServerStatus]);\n\n  // Initialize auth state from localStorage and validate with server\n  useEffect(() => {\n    const initAuth = async () => {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const userData = localStorage.getItem('user');\n      if (token && userData) {\n        try {\n          // Parse user data\n          const parsedUserData = JSON.parse(userData);\n\n          // Check if token is expired\n          if (isTokenExpired(parsedUserData)) {\n            console.log('Token expired, logging out');\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            setUser(null);\n          } else {\n            // Validate token with server\n            const isValid = await validateToken(token);\n            if (isValid) {\n              setUser(parsedUserData);\n            } else {\n              console.log('Invalid token, logging out');\n              localStorage.removeItem('token');\n              localStorage.removeItem('user');\n              setUser(null);\n            }\n          }\n        } catch (error) {\n          // Invalid user data in localStorage\n          console.error('Error initializing auth:', error);\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          setUser(null);\n        }\n      }\n      setLoading(false);\n    };\n    initAuth();\n  }, [isTokenExpired, validateToken]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      serverAvailable,\n      login,\n      logout,\n      isAuthenticated,\n      isGuard,\n      isSecurityGuard: isGuard,\n      // Alias for backward compatibility\n      checkServerStatus\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"weagSY0YYoXF1v1O7PkjW3qzA4U=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useCallback","axios","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","serverAvailable","setServerAvailable","navigate","checkServerStatus","get","error","console","log","message","validateToken","token","isAvailable","isTokenExpired","userData","createdAt","tokenCreationTime","Date","getTime","currentTime","expirationTime","login","username","password","serverStatus","Error","role","toISOString","localStorage","setItem","JSON","stringify","logout","removeItem","window","location","href","isAuthenticated","getItem","parsedUserData","parse","e","isGuard","serverStatusInterval","setInterval","clearInterval","initAuth","isValid","Provider","value","isSecurityGuard","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Rishikesh Ghodke/Desktop/lostAndFound/client/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [serverAvailable, setServerAvailable] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  // Check server availability\r\n  const checkServerStatus = useCallback(async () => {\r\n    try {\r\n      await axios.get('http://localhost:5000/api/test');\r\n      setServerAvailable(true);\r\n      return true;\r\n    } catch (error) {\r\n      console.log('Server unavailable:', error.message);\r\n      setServerAvailable(false);\r\n      navigate('/server-unavailable');\r\n      return false;\r\n    }\r\n  }, [navigate]);\r\n\r\n  // Validate token with server\r\n  const validateToken = useCallback(async (token) => {\r\n    try {\r\n      // Just check if server is available - in a real app, you'd validate the token\r\n      const isAvailable = await checkServerStatus();\r\n      if (!isAvailable) {\r\n        return false;\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error validating token:', error);\r\n      return false;\r\n    }\r\n  }, [checkServerStatus]);\r\n\r\n  // Check token expiration\r\n  const isTokenExpired = useCallback((userData) => {\r\n    if (!userData || !userData.createdAt) return true;\r\n    \r\n    const tokenCreationTime = new Date(userData.createdAt).getTime();\r\n    const currentTime = new Date().getTime();\r\n    \r\n    // Token expires after 8 hours (28800000 ms)\r\n    const expirationTime = 8 * 60 * 60 * 1000;\r\n    \r\n    return currentTime - tokenCreationTime > expirationTime;\r\n  }, []);\r\n\r\n  // Login function to be used by Login component\r\n  const login = useCallback(async (username, password) => {\r\n    try {\r\n      // First check if server is available\r\n      const serverStatus = await checkServerStatus();\r\n      if (!serverStatus) {\r\n        throw new Error(\"Server is unavailable\");\r\n      }\r\n      \r\n      // Check against hardcoded credentials\r\n      if (username === \"pict_guard\" && password === \"secure@guard123\") {\r\n        // Create a mock token for development\r\n        const userData = {\r\n          username: \"pict_guard\",\r\n          role: \"guard\",\r\n          token: \"dev-jwt-token-for-guard-auth\", // In production, get from backend\r\n          createdAt: new Date().toISOString() // Add creation time for expiration check\r\n        };\r\n        \r\n        // Store in localStorage for API requests\r\n        localStorage.setItem('token', userData.token);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        \r\n        setUser(userData);\r\n        return userData;\r\n      } else {\r\n        throw new Error(\"Invalid credentials\");\r\n      }\r\n    } catch (error) {\r\n      if (!serverAvailable) {\r\n        navigate('/server-unavailable');\r\n      }\r\n      throw error;\r\n    }\r\n  }, [checkServerStatus, navigate, serverAvailable]);\r\n\r\n  const logout = useCallback(() => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    // Add a redirect to home page if needed\r\n    window.location.href = '/';\r\n  }, []);\r\n\r\n  const isAuthenticated = useCallback(() => {\r\n    const token = localStorage.getItem('token');\r\n    const userData = localStorage.getItem('user');\r\n    \r\n    if (!token || !userData) {\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      const parsedUserData = JSON.parse(userData);\r\n      if (isTokenExpired(parsedUserData)) {\r\n        return false;\r\n      }\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }, [isTokenExpired]);\r\n\r\n  const isGuard = useCallback(() => {\r\n    return user?.role === 'guard';\r\n  }, [user]);\r\n\r\n  // Periodically check server status in the background\r\n  useEffect(() => {\r\n    const serverStatusInterval = setInterval(() => {\r\n      checkServerStatus();\r\n    }, 60000); // Check every minute\r\n    \r\n    return () => clearInterval(serverStatusInterval);\r\n  }, [checkServerStatus]);\r\n\r\n  // Initialize auth state from localStorage and validate with server\r\n  useEffect(() => {\r\n    const initAuth = async () => {\r\n      setLoading(true);\r\n      \r\n      const token = localStorage.getItem('token');\r\n      const userData = localStorage.getItem('user');\r\n      \r\n      if (token && userData) {\r\n        try {\r\n          // Parse user data\r\n          const parsedUserData = JSON.parse(userData);\r\n          \r\n          // Check if token is expired\r\n          if (isTokenExpired(parsedUserData)) {\r\n            console.log('Token expired, logging out');\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('user');\r\n            setUser(null);\r\n          } else {\r\n            // Validate token with server\r\n            const isValid = await validateToken(token);\r\n            \r\n            if (isValid) {\r\n              setUser(parsedUserData);\r\n            } else {\r\n              console.log('Invalid token, logging out');\r\n              localStorage.removeItem('token');\r\n              localStorage.removeItem('user');\r\n              setUser(null);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          // Invalid user data in localStorage\r\n          console.error('Error initializing auth:', error);\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n          setUser(null);\r\n        }\r\n      }\r\n      \r\n      setLoading(false);\r\n    };\r\n    \r\n    initAuth();\r\n  }, [isTokenExpired, validateToken]);\r\n\r\n  return (\r\n    <AuthContext.Provider \r\n      value={{ \r\n        user,\r\n        loading,\r\n        serverAvailable,\r\n        login,\r\n        logout,\r\n        isAuthenticated,\r\n        isGuard,\r\n        isSecurityGuard: isGuard, // Alias for backward compatibility\r\n        checkServerStatus\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}