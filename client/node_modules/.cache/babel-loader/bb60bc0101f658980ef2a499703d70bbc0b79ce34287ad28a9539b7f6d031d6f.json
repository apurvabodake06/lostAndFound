{"ast":null,"code":"// import axios from 'axios';\n// import jwtDecode from 'jwt-decode';\n\n// const API_URL = '/api/auth';\n\n// // Register a new user (security guard)\n// const register = async (userData) => {\n//   try {\n//     const response = await axios.post(`${API_URL}/register`, userData);\n\n//     if (response.data && response.data.token) {\n//       localStorage.setItem('user', JSON.stringify(response.data));\n//     }\n\n//     return response.data;\n//   } catch (error) {\n//     throw error.response?.data || { message: 'Server error' };\n//   }\n// };\n\n// // Login user (security guard)\n// const login = async (email, password) => {\n//   try {\n//     const response = await axios.post(`${API_URL}/login`, { email, password });\n\n//     if (response.data && response.data.token) {\n//       localStorage.setItem('user', JSON.stringify(response.data));\n//     }\n\n//     return response.data;\n//   } catch (error) {\n//     throw error.response?.data || { message: 'Server error' };\n//   }\n// };\n\n// // Logout user\n// const logout = () => {\n//   localStorage.removeItem('user');\n// };\n\n// // Get current user from local storage\n// const getCurrentUser = () => {\n//   return JSON.parse(localStorage.getItem('user'));\n// };\n\n// // Get auth token\n// const getToken = () => {\n//   const user = getCurrentUser();\n//   return user ? user.token : null;\n// };\n\n// // Set auth token in axios headers\n// const setAuthHeader = () => {\n//   const token = getToken();\n//   if (token) {\n//     axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n//   } else {\n//     delete axios.defaults.headers.common['Authorization'];\n//   }\n// };\n\n// // Export individual functions for direct importing\n// export { register, login, logout, getCurrentUser, getToken, setAuthHeader };\n\n// // Default export for backward compatibility\n// const authService = {\n//   register,\n//   login,\n//   logout,\n//   getCurrentUser,\n//   getToken,\n//   setAuthHeader\n// };\n\n// export default authService;\n\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nconst API_URL = '/api/auth';\n\n// Helper function to handle localStorage\nconst setUser = userData => {\n  if (userData !== null && userData !== void 0 && userData.token) {\n    localStorage.setItem('user', JSON.stringify(userData));\n    setAuthHeader(); // Update axios headers immediately\n  }\n};\n\n// Register a new user (security guard)\nconst register = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, userData);\n    setUser(response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n      message: 'Server error'\n    };\n  }\n};\n\n// Login user (security guard)\nconst login = async (email, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, {\n      email,\n      password\n    });\n    setUser(response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n      message: 'Server error'\n    };\n  }\n};\n\n// Logout user\nconst logout = () => {\n  localStorage.removeItem('user');\n  delete axios.defaults.headers.common['Authorization'];\n};\n\n// Get current user from local storage\nconst getCurrentUser = () => {\n  const user = localStorage.getItem('user');\n  return user ? JSON.parse(user) : null;\n};\n\n// Get auth token\nconst getToken = () => {\n  const user = getCurrentUser();\n  return (user === null || user === void 0 ? void 0 : user.token) || null;\n};\n\n// Set auth token in axios headers\nconst setAuthHeader = () => {\n  const token = getToken();\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\n\n// Initialize auth header when module loads\nsetAuthHeader();\n\n// Export individual functions for direct importing\nexport { register, login, logout, getCurrentUser, getToken, setAuthHeader };\n\n// Default export for backward compatibility\nconst authService = {\n  register,\n  login,\n  logout,\n  getCurrentUser,\n  getToken,\n  setAuthHeader\n};\nexport default authService;","map":{"version":3,"names":["axios","jwtDecode","API_URL","setUser","userData","token","localStorage","setItem","JSON","stringify","setAuthHeader","register","response","post","data","error","_error$response","message","login","email","password","_error$response2","logout","removeItem","defaults","headers","common","getCurrentUser","user","getItem","parse","getToken","authService"],"sources":["D:/study/pict/TE/sem 6/inhouse project/lostAndFound/client/src/services/authService.js"],"sourcesContent":["// import axios from 'axios';\r\n// import jwtDecode from 'jwt-decode';\r\n\r\n// const API_URL = '/api/auth';\r\n\r\n// // Register a new user (security guard)\r\n// const register = async (userData) => {\r\n//   try {\r\n//     const response = await axios.post(`${API_URL}/register`, userData);\r\n    \r\n//     if (response.data && response.data.token) {\r\n//       localStorage.setItem('user', JSON.stringify(response.data));\r\n//     }\r\n    \r\n//     return response.data;\r\n//   } catch (error) {\r\n//     throw error.response?.data || { message: 'Server error' };\r\n//   }\r\n// };\r\n\r\n// // Login user (security guard)\r\n// const login = async (email, password) => {\r\n//   try {\r\n//     const response = await axios.post(`${API_URL}/login`, { email, password });\r\n    \r\n//     if (response.data && response.data.token) {\r\n//       localStorage.setItem('user', JSON.stringify(response.data));\r\n//     }\r\n    \r\n//     return response.data;\r\n//   } catch (error) {\r\n//     throw error.response?.data || { message: 'Server error' };\r\n//   }\r\n// };\r\n\r\n// // Logout user\r\n// const logout = () => {\r\n//   localStorage.removeItem('user');\r\n// };\r\n\r\n// // Get current user from local storage\r\n// const getCurrentUser = () => {\r\n//   return JSON.parse(localStorage.getItem('user'));\r\n// };\r\n\r\n// // Get auth token\r\n// const getToken = () => {\r\n//   const user = getCurrentUser();\r\n//   return user ? user.token : null;\r\n// };\r\n\r\n// // Set auth token in axios headers\r\n// const setAuthHeader = () => {\r\n//   const token = getToken();\r\n//   if (token) {\r\n//     axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n//   } else {\r\n//     delete axios.defaults.headers.common['Authorization'];\r\n//   }\r\n// };\r\n\r\n// // Export individual functions for direct importing\r\n// export { register, login, logout, getCurrentUser, getToken, setAuthHeader };\r\n\r\n// // Default export for backward compatibility\r\n// const authService = {\r\n//   register,\r\n//   login,\r\n//   logout,\r\n//   getCurrentUser,\r\n//   getToken,\r\n//   setAuthHeader\r\n// };\r\n\r\n// export default authService;\r\n\r\n\r\n\r\nimport axios from 'axios';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst API_URL = '/api/auth';\r\n\r\n// Helper function to handle localStorage\r\nconst setUser = (userData) => {\r\n  if (userData?.token) {\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    setAuthHeader(); // Update axios headers immediately\r\n  }\r\n};\r\n\r\n// Register a new user (security guard)\r\nconst register = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/register`, userData);\r\n    setUser(response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { message: 'Server error' };\r\n  }\r\n};\r\n\r\n// Login user (security guard)\r\nconst login = async (email, password) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/login`, { email, password });\r\n    setUser(response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || { message: 'Server error' };\r\n  }\r\n};\r\n\r\n// Logout user\r\nconst logout = () => {\r\n  localStorage.removeItem('user');\r\n  delete axios.defaults.headers.common['Authorization'];\r\n};\r\n\r\n// Get current user from local storage\r\nconst getCurrentUser = () => {\r\n  const user = localStorage.getItem('user');\r\n  return user ? JSON.parse(user) : null;\r\n};\r\n\r\n// Get auth token\r\nconst getToken = () => {\r\n  const user = getCurrentUser();\r\n  return user?.token || null;\r\n};\r\n\r\n// Set auth token in axios headers\r\nconst setAuthHeader = () => {\r\n  const token = getToken();\r\n  if (token) {\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\n// Initialize auth header when module loads\r\nsetAuthHeader();\r\n\r\n// Export individual functions for direct importing\r\nexport {\r\n  register,\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n  getToken,\r\n  setAuthHeader\r\n};\r\n\r\n// Default export for backward compatibility\r\nconst authService = {\r\n  register,\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n  getToken,\r\n  setAuthHeader\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}